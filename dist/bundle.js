var AwsFileUpload;AwsFileUpload=(()=>{"use strict";var t={138:(t,e,o)=>{o.d(e,{default:()=>p});const i={0:"Invalid option parameter it must be an Object",1:"Invalid File",2:"Invalid Response format, response format must be \n        {\n            success : true|false,\n            data : {\n                url : String\n            }\n        }\n    ",3:"sined Url not found in response",4:"MultipartUpload: upload id not found in response",5:"Failed to upload file",6:"MultipartUpload: uploadIdRequest not provided.",7:"MultipartUpload: uploadIdRequest url not provided.",8:"MultipartUpload: upload id not found in response",9:"File name is not provided.",10:"MultipartUpload: failed to complete file upload.",11:"MultipartUpload: The minimal multipart upload size is 5Mb (chunkSize >= 5MB).",12:"MultipartUpload: multipartsignedUrlRequest.url -> Url is missing"};class s{constructor(t){this.options=t,this.isUploadModeMultipart=!1,this.init().catch((t=>{var e;t.code&&i[t.code]?(t.code,e=t.code,t.response):e=null,this.options.onError?this.options.onError({message:i[t.code],response:t.response,code:t.code}):(console.group("AwsFileUpload"),console.error(t.code?i[t.code]:t),console.error(`errorCode: ${e}`),console.groupEnd())}))}fetchSignedUrl(){var t,e,o;return e=(t=this.isUploadModeMultipart&&this.options.multipartsignedUrlRequest?Object.assign({},this.options.multipartsignedUrlRequest):Object.assign({},this.options.signedUrlRequest)).url,o=t.body||{},this.isUploadModeMultipart&&(o.partNumber=this.partNumber,o.uploadId=this.uploadId),o.fileName=this.options.fileName,t.body=JSON.stringify(o),delete t.url,fetch(e,t)}fetchUploadId(){var t=Object.assign({},this.options.uploadIdRequest);let e=t.body||{};return e.fileName=this.options.fileName,t.body=JSON.stringify(e),delete t.url,fetch(this.options.uploadIdRequest.url,t)}completeMultipart(t){var e=Object.assign({},this.options.completeMultipartRequest);let o=e.body||{};return o.fileName=this.options.fileName,o.uploadId=this.uploadId,o.parts=t,e.body=JSON.stringify(o),delete e.url,fetch(this.options.completeMultipartRequest.url,e)}async init(){var t,e,o;if(!(this.options instanceof Object))throw{code:0};if(!(this.options.file instanceof File))throw{code:1};if(!this.options.fileName)throw{code:9};if(this.options.signedUrlRequest.headers||(this.options.signedUrlRequest.headers={}),this.options.signedUrlRequest.headers["Content-type"]||(this.options.signedUrlRequest.headers["Content-type"]="application/json"),this.evaluateIsMultipart(),this.isUploadModeMultipart){if(!this.options.uploadIdRequest)throw{code:6};if(!this.options.uploadIdRequest.url)throw{code:7};if(this.options.uploadIdRequest.headers||(this.options.uploadIdRequest.headers={}),this.options.uploadIdRequest.headers["Content-type"]||(this.options.uploadIdRequest.headers["Content-type"]="application/json"),this.options.multipartsignedUrlRequest){if(!this.options.multipartsignedUrlRequest.url)throw{code:12};this.options.multipartsignedUrlRequest.headers||(this.options.multipartsignedUrlRequest.headers={}),this.options.multipartsignedUrlRequest.headers["Content-type"]||(this.options.multipartsignedUrlRequest.headers["Content-type"]="application/json")}if(!this.options.completeMultipartRequest)throw{code:6};if(!this.options.completeMultipartRequest.url)throw{code:7};this.options.completeMultipartRequest.headers||(this.options.completeMultipartRequest.headers={}),this.options.completeMultipartRequest.headers["Content-type"]||(this.options.completeMultipartRequest.headers["Content-type"]="application/json");let i,s,p,a=Math.floor(this.options.file.size/this.options.chunkSize)+1,n=[],r=[];if(200!=(t=await this.fetchUploadId()).status)throw{code:8,response:t};if(e=await t.json(),this.uploadId=e.data.uploadId,!this.uploadId)throw{code:4};for(let e=1;e<a+1;e++){if(i=(e-1)*this.options.chunkSize,s=e*this.options.chunkSize,p=e<a?this.options.file.slice(i,s):this.options.file.slice(i),this.partNumber=e,t=await this.fetchSignedUrl(),!(o=await t.json()).data)throw{code:2,response:t};if(!o.data.url)throw{code:3,response:t};if(this.signedUrl=o.data.url,200!=(t=await this.uploadFile(p)).status)throw{code:5,response:t};n.push(t),r.push({ETag:t.headers.get("etag"),PartNumber:e,Size:p.size})}if(200!=(t=await this.completeMultipart(r)).status)throw{code:10,response:t};this.options.onSuccess&&this.options.onSuccess(t,r,n)}else{if(t=await this.fetchSignedUrl(),!(o=await t.json()).data)throw{code:2,response:t};if(!o.data.url)throw{code:3,response:t};if(this.signedUrl=o.data.url,200!=(t=await this.uploadFile(this.options.file)).status)throw{code:5,response:t};this.options.onSuccess&&this.options.onSuccess(t)}}uploadFile(t){var e=new Headers;e.append("Content-Type",this.options.file.type);var o={method:"PUT",headers:e,body:t,redirect:"follow"};return fetch(this.signedUrl,o)}evaluateIsMultipart(){if("auto"==this.options.multipartUpload||1==this.options.multipartUpload){if(this.options.chunkSize&&this.options.chunkSize<6e6)throw{code:11};this.options.chunkSize=this.options.chunkSize||1e7,this.isUploadModeMultipart="auto"!=this.options.multipartUpload||this.options.file.size/this.options.chunkSize>1}}}function p(t){new s(t)}}},e={};function o(i){if(e[i])return e[i].exports;var s=e[i]={exports:{}};return t[i](s,s.exports,o),s.exports}return o.d=(t,e)=>{for(var i in e)o.o(e,i)&&!o.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o(138)})().default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,